diff -Naur shell_cmds-203/date/date.c shell_cmds/date/date.c
--- shell_cmds-203/date/date.c	2015-11-07 23:19:55.000000000 +0100
+++ shell_cmds/date/date.c	2018-12-08 16:03:31.000000000 +0100
@@ -57,13 +57,15 @@
 #include <utmpx.h>
 
 #ifdef __APPLE__
-#include <get_compat.h>
-#else
+// #include <get_compat.h>
+// #else
 #define COMPAT_MODE(a,b) (1)
 #endif /* __APPLE__ */
 
 #include "extern.h"
 #include "vary.h"
+#include <errno.h>
+#include "ios_error.h"
 
 #ifndef	TM_YEAR_BASE
 #define	TM_YEAR_BASE	1900
@@ -74,7 +76,7 @@
 #endif
 
 static time_t tval;
-int retval;
+__thread int retval;
 static int unix2003_std;	/* to determine legacy vs std mode */
 
 static void setthetime(const char *, const char *, int, int);
@@ -84,7 +86,7 @@
 static const char *rfc2822_format = "%a, %d %b %Y %T %z";
 
 int
-main(int argc, char *argv[])
+date_main(int argc, char *argv[])
 {
 	struct timezone tz;
 	int ch, rflag;
@@ -107,6 +109,7 @@
 	tz.tz_dsttime = tz.tz_minuteswest = 0;
 	rflag = 0;
 	jflag = nflag = Rflag = 0;
+    optind = 1; opterr = 1; optreset = 1;
 	set_timezone = 0;
 	while ((ch = getopt(argc, argv, "d:f:jnRr:t:uv:")) != -1)
 		switch((char)ch) {
@@ -161,11 +164,13 @@
 	 * If -d or -t, set the timezone or daylight savings time; this
 	 * doesn't belong here; the kernel should not know about either.
 	 */
-	if (set_timezone && settimeofday(NULL, &tz) != 0)
+    if (set_timezone && settimeofday(NULL, &tz) != 0) {
 		err(1, "settimeofday (timezone)");
+    }
 
-	if (!rflag && time(&tval) == -1)
+    if (!rflag && time(&tval) == -1) {
 		err(1, "time");
+    }
 
 	format = "%+";
 
@@ -199,7 +204,7 @@
 #endif
 	badv = vary_apply(v, &lt);
 	if (badv) {
-		fprintf(stderr, "%s: Cannot apply date adjustment\n",
+		fprintf(thread_stderr, "%s: Cannot apply date adjustment\n",
 			badv->arg);
 		vary_destroy(v);
 		usage();
@@ -214,9 +219,10 @@
 		setlocale(LC_TIME, "C");
 
 	(void)strftime(buf, sizeof(buf), format, &lt);
-	(void)printf("%s\n", buf);
-	if (fflush(stdout))
+	(void)fprintf(thread_stdout, "%s\n", buf);
+    if (fflush(thread_stdout)) {
 		err(1, "stdout");
+    }
 	/*
 	 * If date/time could not be set/notified in the other hosts as
 	 * determined by netsetval(), a return value 2 is set, which is
@@ -246,11 +252,11 @@
 	if (fmt != NULL) {
 		t = strptime(p, fmt, lt);
 		if (t == NULL) {
-			fprintf(stderr, "Failed conversion of ``%s''"
+			fprintf(thread_stderr, "Failed conversion of ``%s''"
 				" using format ``%s''\n", p, fmt);
 			badformat();
 		} else if (*t != '\0')
-			fprintf(stderr, "Warning: Ignoring %ld extraneous"
+			fprintf(thread_stderr, "Warning: Ignoring %ld extraneous"
 				" characters in date string (%s)\n",
 				(long) strlen(t), t);
 	} else {
@@ -319,19 +325,21 @@
 	}
 
 	/* convert broken-down time to GMT clock time */
-	if ((tval = mktime(lt)) == -1)
+    if ((tval = mktime(lt)) == -1) {
 		errx(1, "nonexistent time");
+    }
 
 	if (!jflag) {
 		/* set the time */
-		if (nflag || netsettime(tval)) {
+		if (nflag /* || netsettime(tval)*/ ) {
 			utx.ut_type = OLD_TIME;
 			(void)gettimeofday(&utx.ut_tv, NULL);
 			pututxline(&utx);
 			tv.tv_sec = tval;
 			tv.tv_usec = 0;
-			if (settimeofday(&tv, NULL) != 0)
+            if (settimeofday(&tv, NULL) != 0) {
 				err(1, "settimeofday (timeval)");
+            }
 			utx.ut_type = NEW_TIME;
 			(void)gettimeofday(&utx.ut_tv, NULL);
 			pututxline(&utx);
@@ -346,14 +354,14 @@
 static void
 badformat(void)
 {
-	warnx("illegal time format");
+    warnx("illegal time format");
 	usage();
 }
 
 static void
 usage(void)
 {
-	(void)fprintf(stderr, "%s\n%s\n",
+	(void)fprintf(thread_stderr, "%s\n%s\n",
 	    "usage: date [-jnRu] [-d dst] [-r seconds] [-t west] "
 	    "[-v[+|-]val[ymwdHMS]] ... ",
 	    unix2003_std ?
diff -Naur shell_cmds-203/date/extern.h shell_cmds/date/extern.h
--- shell_cmds-203/date/extern.h	2015-11-07 23:19:55.000000000 +0100
+++ shell_cmds/date/extern.h	2018-12-08 16:03:31.000000000 +0100
@@ -30,6 +30,6 @@
  * $FreeBSD$
  */
 
-extern int retval;
+extern __thread int retval;
 
 int	netsettime(time_t);
diff -Naur shell_cmds-203/date/vary.c shell_cmds/date/vary.c
--- shell_cmds-203/date/vary.c	2015-11-07 23:19:55.000000000 +0100
+++ shell_cmds/date/vary.c	2018-12-08 16:03:31.000000000 +0100
@@ -31,7 +31,10 @@
 #include <time.h>
 #include <string.h>
 #include <stdlib.h>
+#include <stdio.h>
 #include "vary.h"
+#include <errno.h>
+#include "ios_error.h"
 
 struct trans {
   int val;
@@ -92,8 +95,9 @@
   } else
     nextp = &result;
 
-  if ((*nextp = (struct vary *)malloc(sizeof(struct vary))) == NULL)
-    err(1, "malloc");
+    if ((*nextp = (struct vary *)malloc(sizeof(struct vary))) == NULL) {
+        err(1, "malloc");
+    }
   (*nextp)->arg = arg;
   (*nextp)->next = NULL;
   return result;
diff -Naur shell_cmds-203/echo/echo.c shell_cmds/echo/echo.c
--- shell_cmds-203/echo/echo.c	2006-12-21 02:07:57.000000000 +0100
+++ shell_cmds/echo/echo.c	2018-12-08 16:03:31.000000000 +0100
@@ -50,6 +50,10 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+// iOS
+#include <stdio.h>
+#include "ios_error.h"
+#include <pthread.h>
 
 /*
  * Report an error and exit.
@@ -59,17 +63,18 @@
 errexit(const char *prog, const char *reason)
 {
 	char *errstr = strerror(errno);
-	write(STDERR_FILENO, prog, strlen(prog));
-	write(STDERR_FILENO, ": ", 2);
-	write(STDERR_FILENO, reason, strlen(reason));
-	write(STDERR_FILENO, ": ", 2);
-	write(STDERR_FILENO, errstr, strlen(errstr));
-	write(STDERR_FILENO, "\n", 1);
-	exit(1);
+    fprintf(thread_stderr, "%s: %s: %s\n", prog, reason, errstr);
+//    write(STDERR_FILENO, prog, strlen(prog));
+//    write(STDERR_FILENO, ": ", 2);
+//    write(STDERR_FILENO, reason, strlen(reason));
+//    write(STDERR_FILENO, ": ", 2);
+//    write(STDERR_FILENO, errstr, strlen(errstr));
+//    write(STDERR_FILENO, "\n", 1);
+    exit(1);
 }
 	
 int
-main(int argc, char *argv[])
+echo_main(int argc, char *argv[])
 {
 	int nflag;	/* if not set, output a trailing newline. */
 	int veclen;	/* number of writev arguments. */
@@ -128,8 +133,14 @@
 		int nwrite;
 
 		nwrite = (veclen > IOV_MAX) ? IOV_MAX : veclen;
-		if (writev(STDOUT_FILENO, iov, nwrite) == -1)
-			errexit(progname, "write");
+        // if (writev(STDOUT_FILENO, iov, nwrite) == -1)
+        //         errexit(progname, "write");
+        struct iovec *cp = iov;
+        for (int i = 0; i < nwrite; i++) {
+            if (fprintf(thread_stdout, "%s", (char*)(cp->iov_base)) == -1)
+                errexit(progname, "write");
+            cp++;
+        }
 		iov += nwrite;
 		veclen -= nwrite;
 	}
diff -Naur shell_cmds-203/env/env.c shell_cmds/env/env.c
--- shell_cmds-203/env/env.c	2014-08-05 00:47:11.000000000 +0200
+++ shell_cmds/env/env.c	2018-12-08 16:03:31.000000000 +0100
@@ -50,15 +50,18 @@
 #include <unistd.h>
 
 #include "envopts.h"
+#include "ios_error.h"
 
 extern char **environ;
 
-int	 env_verbosity;
+__thread int	 env_verbosity;
 
 static void usage(void);
 
+
+
 int
-main(int argc, char **argv)
+env_main(int argc, char **argv)
 {
 	char *altpath, **ep, *p, **parg;
 	char *cleanenv[1];
@@ -67,6 +70,7 @@
 
 	altpath = NULL;
 	want_clear = 0;
+    optind = 1; opterr = 1; optreset = 1;
 	while ((ch = getopt(argc, argv, "-iP:S:u:v")) != -1)
 		switch(ch) {
 		case '-':
@@ -85,15 +89,16 @@
 			break;
 		case 'u':
 			if (env_verbosity)
-				fprintf(stderr, "#env unset:\t%s\n", optarg);
+				fprintf(thread_stderr, "#env unset:\t%s\n", optarg);
 			rtrn = unsetenv(optarg);
-			if (rtrn == -1)
+            if (rtrn == -1) {
 				err(EXIT_FAILURE, "unsetenv %s", optarg);
+            }
 			break;
 		case 'v':
 			env_verbosity++;
 			if (env_verbosity > 1)
-				fprintf(stderr, "#env verbosity now at %d\n",
+				fprintf(thread_stderr, "#env verbosity now at %d\n",
 				    env_verbosity);
 			break;
 		case '?':
@@ -104,41 +109,67 @@
 		environ = cleanenv;
 		cleanenv[0] = NULL;
 		if (env_verbosity)
-			fprintf(stderr, "#env clearing environ\n");
+			fprintf(thread_stderr, "#env clearing environ\n");
 	}
 	for (argv += optind; *argv && (p = strchr(*argv, '=')); ++argv) {
 		if (env_verbosity)
-			fprintf(stderr, "#env setenv:\t%s\n", *argv);
+			fprintf(thread_stderr, "#env setenv:\t%s\n", *argv);
 		*p = '\0';
 		rtrn = setenv(*argv, p + 1, 1);
 		*p = '=';
-		if (rtrn == -1)
+        if (rtrn == -1) {
 			err(EXIT_FAILURE, "setenv %s", *argv);
+        }
 	}
 	if (*argv) {
 		if (altpath)
 			search_paths(altpath, argv);
 		if (env_verbosity) {
-			fprintf(stderr, "#env executing:\t%s\n", *argv);
+			fprintf(thread_stderr, "#env executing:\t%s\n", *argv);
 			for (parg = argv, argc = 0; *parg; parg++, argc++)
-				fprintf(stderr, "#env    arg[%d]=\t'%s'\n",
+				fprintf(thread_stderr, "#env    arg[%d]=\t'%s'\n",
 				    argc, *parg);
 			if (env_verbosity > 1)
 				sleep(1);
 		}
-		execvp(*argv, argv);
-		err(errno == ENOENT ? 127 : 126, "%s", *argv);
+        execvp(*argv, argv);
+        err(errno == ENOENT ? 127 : 126, "%s", *argv);
 	}
 	for (ep = environ; *ep; ep++)
-		(void)printf("%s\n", *ep);
+		(void)fprintf(thread_stdout, "%s\n", *ep);
 	exit(0);
 }
 
 static void
 usage(void)
 {
-	(void)fprintf(stderr,
+	(void)fprintf(thread_stderr,
 	    "usage: env [-iv] [-P utilpath] [-S string] [-u name]\n"
 	    "           [name=value ...] [utility [argument ...]]\n");
 	exit(1);
 }
+
+
+int setenv_main(int argc, char** argv) {
+    if (argc <= 1) return env_main(argc, argv);
+    if (argc > 3) {
+        fprintf(thread_stderr, "setenv: Too many arguments\n"); fflush(thread_stderr);
+        return 0;
+    }
+    // setenv VARIABLE value
+    if (argv[2] != NULL) setenv(argv[1], argv[2], 1);
+    else setenv(argv[1], "", 1); // if there's no value, pass an empty string instead of a null pointer
+    return 0;
+}
+
+int unsetenv_main(int argc, char** argv) {
+    if (argc <= 1) {
+        fprintf(thread_stderr, "unsetenv: Too few arguments\n"); fflush(thread_stderr);
+        return 0;
+    }
+    // unsetenv acts on all parameters
+    for (int i = 1; i < argc; i++) unsetenv(argv[i]);
+    return 0;
+}
+
+
diff -Naur shell_cmds-203/env/envopts.c shell_cmds/env/envopts.c
--- shell_cmds-203/env/envopts.c	2014-08-05 00:47:11.000000000 +0200
+++ shell_cmds/env/envopts.c	2018-12-08 16:03:31.000000000 +0100
@@ -42,6 +42,7 @@
 #include <unistd.h>
 
 #include "envopts.h"
+#include "ios_error.h"
 
 static const char *
 		 expand_vars(int in_thisarg, char **thisarg_p, char **dest_p,
@@ -73,7 +74,7 @@
             (getuid() != 0 ||
             (fin.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) != 0)) {
                 if (env_verbosity > 1)
-			fprintf(stderr, "#env   matched:\t'%s'\n", candidate);
+			fprintf(thread_stderr, "#env   matched:\t'%s'\n", candidate);
                 return (1);
         }
         return (0);
@@ -106,8 +107,8 @@
 		return;
 
 	if (env_verbosity > 1) {
-		fprintf(stderr, "#env Searching:\t'%s'\n", path);
-		fprintf(stderr, "#env  for file:\t'%s'\n", filename);
+		fprintf(thread_stderr, "#env Searching:\t'%s'\n", path);
+		fprintf(thread_stderr, "#env  for file:\t'%s'\n", filename);
 	}
 
 	fqname = NULL;
@@ -285,9 +286,10 @@
 				 * This would not make sense if found in the
 				 * middle of a quoted string.
 				 */
-				if (in_dq)
-					errx(1, "Sequence '\\%c' is not allowed"
-					    " in quoted strings", *src);
+                if (in_dq) {
+                    errx(1, "Sequence '\\%c' is not allowed"
+					    " in quoted strings\n", *src);
+                }
 				goto str_done;
 			case 'f':
 				copychar = '\f';
@@ -307,9 +309,10 @@
 			default:
 				if (isspacech(*src))
 					copychar = *src;
-				else
-					errx(1, "Invalid sequence '\\%c' in -S",
+                else {
+                    errx(1, "Invalid sequence '\\%c' in -S",
 					    *src);
+                }
 			}
 			break;
 		default:
@@ -355,15 +358,15 @@
 	*dest = '\0';
 	*nextarg = NULL;
 	if (in_dq || in_sq) {
-		errx(1, "No terminating quote for string: %.*s%s",
-		    bq_destlen, *(nextarg - 1), bq_src);
-	}
+        errx(1, "No terminating quote for string: %.*s%s",
+            bq_destlen, *(nextarg - 1), bq_src);
+        }
 	if (env_verbosity > 1) {
-		fprintf(stderr, "#env  split -S:\t'%s'\n", str);
+		fprintf(thread_stderr, "#env  split -S:\t'%s'\n", str);
 		oldarg = newargv + 1;
-		fprintf(stderr, "#env      into:\t'%s'\n", *oldarg);
+		fprintf(thread_stderr, "#env      into:\t'%s'\n", *oldarg);
 		for (oldarg++; *oldarg; oldarg++)
-			fprintf(stderr, "#env          &\t'%s'\n", *oldarg);
+			fprintf(thread_stderr, "#env          &\t'%s'\n", *oldarg);
 	}
 
 	/* Copy the unprocessed arg-pointers from the original array */
@@ -403,9 +406,10 @@
 			if (*vend == '}')
 				bad_reference = 0;
 		}
-	if (bad_reference)
-		errx(1, "Only ${VARNAME} expansion is supported, error at: %s",
-		    *src_p);
+    if (bad_reference) {
+        errx(1, "Only ${VARNAME} expansion is supported, error at: %s",
+            *src_p);
+    }
 
 	/*
 	 * We now know we have a valid environment variable name, so update
@@ -420,7 +424,7 @@
 	vvalue = getenv(vname);
 	if (vvalue == NULL || *vvalue == '\0') {
 		if (env_verbosity > 2)
-			fprintf(stderr,
+			fprintf(thread_stderr,
 			    "#env  replacing ${%s} with null string\n",
 			    vname);
 		free(vname);
@@ -428,7 +432,7 @@
 	}
 
 	if (env_verbosity > 2)
-		fprintf(stderr, "#env  expanding ${%s} into '%s'\n", vname,
+		fprintf(thread_stderr, "#env  expanding ${%s} into '%s'\n", vname,
 		    vvalue);
 
 	/*
diff -Naur shell_cmds-203/env/envopts.h shell_cmds/env/envopts.h
--- shell_cmds-203/env/envopts.h	2014-08-05 00:47:11.000000000 +0200
+++ shell_cmds/env/envopts.h	2018-12-08 16:03:31.000000000 +0100
@@ -34,4 +34,4 @@
 void		 split_spaces(const char *str, int *origind, int *origc,
 		    char ***origv);
 
-extern int	 env_verbosity;
+extern __thread int	 env_verbosity;
diff -Naur shell_cmds-203/id/id.c shell_cmds/id/id.c
--- shell_cmds-203/id/id.c	2014-02-18 21:44:21.000000000 +0100
+++ shell_cmds/id/id.c	2018-12-08 16:03:31.000000000 +0100
@@ -62,26 +62,27 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include "ios_error.h"
 
-void	id_print(struct passwd *, int, int, int);
-void	pline(struct passwd *);
-void	pretty(struct passwd *);
-void	auditid(void);
-void	fullname(struct passwd *);
-void	group(struct passwd *, int);
-void	maclabel(void);
-void	usage(void);
+static void	id_print(struct passwd *, int, int, int);
+static void	pline(struct passwd *);
+static void	pretty(struct passwd *);
+static void	auditid(void);
+static void	fullname(struct passwd *);
+static void	group(struct passwd *, int);
+static void	maclabel(void);
+static void	usage(void);
 struct passwd *who(char *);
 
-int isgroups, iswhoami;
+static int isgroups, iswhoami;
 
 #ifdef __APPLE__
 // SPI for 5235093
-int32_t getgrouplist_2(const char *, gid_t, gid_t **);
+// int32_t getgrouplist_2(const char *, gid_t, gid_t **);
 #endif
 
 int
-main(int argc, char *argv[])
+id_main(int argc, char *argv[])
 {
 	struct group *gr;
 	struct passwd *pw;
@@ -93,6 +94,10 @@
 	Gflag = Mflag = Pflag = gflag = nflag = pflag = rflag = uflag = 0;
 	Aflag = 0;
 	Fflag = 0;
+    optind = 1; opterr = 1; optreset = 1;
+    // Initialize:
+    isgroups = 0;
+    iswhoami = 0;
 
 	myname = strrchr(argv[0], '/');
 	myname = (myname != NULL) ? myname + 1 : argv[0];
@@ -183,18 +188,18 @@
 	if (gflag) {
 		id = pw ? pw->pw_gid : rflag ? getgid() : getegid();
 		if (nflag && (gr = getgrgid(id)))
-			(void)printf("%s\n", gr->gr_name);
+			(void)fprintf(thread_stdout, "%s\n", gr->gr_name);
 		else
-			(void)printf("%u\n", id);
+			(void)fprintf(thread_stdout, "%u\n", id);
 		exit(0);
 	}
 
 	if (uflag) {
 		id = pw ? pw->pw_uid : rflag ? getuid() : geteuid();
 		if (nflag && (pw = getpwuid(id)))
-			(void)printf("%s\n", pw->pw_name);
+			(void)fprintf(thread_stdout, "%s\n", pw->pw_name);
 		else
-			(void)printf("%u\n", id);
+			(void)fprintf(thread_stdout, "%u\n", id);
 		exit(0);
 	}
 
@@ -237,34 +242,35 @@
 	char *login;
 
 	if (pw) {
-		(void)printf("uid\t%s\n", pw->pw_name);
-		(void)printf("groups\t");
+		(void)fprintf(thread_stdout, "uid\t%s\n", pw->pw_name);
+		(void)fprintf(thread_stdout, "groups\t");
 		group(pw, 1);
 	} else {
-		if ((login = getlogin()) == NULL)
+        if ((login = getlogin()) == NULL) {
 			err(1, "getlogin");
+        }
 
 		pw = getpwuid(rid = getuid());
 		if (pw == NULL || strcmp(login, pw->pw_name))
-			(void)printf("login\t%s\n", login);
+			(void)fprintf(thread_stdout, "login\t%s\n", login);
 		if (pw)
-			(void)printf("uid\t%s\n", pw->pw_name);
+			(void)fprintf(thread_stdout, "uid\t%s\n", pw->pw_name);
 		else
-			(void)printf("uid\t%u\n", rid);
+			(void)fprintf(thread_stdout, "uid\t%u\n", rid);
 
 		if ((eid = geteuid()) != rid) {
 			if ((pw = getpwuid(eid)))
-				(void)printf("euid\t%s\n", pw->pw_name);
+				(void)fprintf(thread_stdout, "euid\t%s\n", pw->pw_name);
 			else
-				(void)printf("euid\t%u\n", eid);
+				(void)fprintf(thread_stdout, "euid\t%u\n", eid);
 		}
 		if ((rid = getgid()) != (eid = getegid())) {
 			if ((gr = getgrgid(rid)))
-				(void)printf("rgid\t%s\n", gr->gr_name);
+				(void)fprintf(thread_stdout, "rgid\t%s\n", gr->gr_name);
 			else
-				(void)printf("rgid\t%u\n", rid);
+				(void)fprintf(thread_stdout, "rgid\t%u\n", rid);
 		}
-		(void)printf("groups\t");
+		(void)fprintf(thread_stdout, "groups\t");
 		group(NULL, 1);
 	}
 }
@@ -303,7 +309,7 @@
 	if (use_ggl && pw != NULL) {
 #ifdef __APPLE__
 		// 5235093
-		ngroups = getgrouplist_2(pw->pw_name, gid, &groups);
+		// ngroups = getgrouplist_2(pw->pw_name, gid, &groups);
 #else
 		ngroups = NGROUPS + 1;
 		getgrouplist(pw->pw_name, gid, groups, &ngroups);
@@ -318,37 +324,37 @@
 
 #ifdef __APPLE__
 	if (ngroups < 0)
-		warn("failed to retrieve group list");
+        warn("failed to retrieve group list");
 #endif
 
 	if (pw != NULL)
-		printf("uid=%u(%s)", uid, pw->pw_name);
+		fprintf(thread_stdout, "uid=%u(%s)", uid, pw->pw_name);
 	else 
-		printf("uid=%u", getuid());
-	printf(" gid=%u", gid);
+		fprintf(thread_stdout, "uid=%u", getuid());
+	fprintf(thread_stdout, " gid=%u", gid);
 	if ((gr = getgrgid(gid)))
-		(void)printf("(%s)", gr->gr_name);
+		(void)fprintf(thread_stdout, "(%s)", gr->gr_name);
 	if (p_euid && (euid = geteuid()) != uid) {
-		(void)printf(" euid=%u", euid);
+		(void)fprintf(thread_stdout, " euid=%u", euid);
 		if ((pw = getpwuid(euid)))
-			(void)printf("(%s)", pw->pw_name);
+			(void)fprintf(thread_stdout, "(%s)", pw->pw_name);
 	}
 	if (p_egid && (egid = getegid()) != gid) {
-		(void)printf(" egid=%u", egid);
+		(void)fprintf(thread_stdout, " egid=%u", egid);
 		if ((gr = getgrgid(egid)))
-			(void)printf("(%s)", gr->gr_name);
+			(void)fprintf(thread_stdout, "(%s)", gr->gr_name);
 	}
 	fmt = " groups=%u";
 	for (lastgid = -1, cnt = 0; cnt < ngroups; ++cnt) {
 		if (lastgid == (gid = groups[cnt]))
 			continue;
-		printf(fmt, gid);
+		fprintf(thread_stdout, fmt, gid);
 		fmt = ",%u";
 		if ((gr = getgrgid(gid)))
-			printf("(%s)", gr->gr_name);
+			fprintf(thread_stdout, "(%s)", gr->gr_name);
 		lastgid = gid;
 	}
-	printf("\n");
+	fprintf(thread_stdout, "\n");
 #ifdef __APPLE__
 	free(groups);
 #endif
@@ -360,13 +366,14 @@
 {
 	auditinfo_addr_t auditinfo;
 
-	if (getaudit_addr(&auditinfo, sizeof(auditinfo)) < 0)
+    if (getaudit_addr(&auditinfo, sizeof(auditinfo)) < 0) {
 		err(1, "getaudit");
-	printf("auid=%d\n", auditinfo.ai_auid);
-	printf("mask.success=0x%08x\n", auditinfo.ai_mask.am_success);
-	printf("mask.failure=0x%08x\n", auditinfo.ai_mask.am_failure);
-	printf("termid.port=0x%08x\n", auditinfo.ai_termid.at_port);
-	printf("asid=%d\n", auditinfo.ai_asid);
+    }
+	fprintf(thread_stdout, "auid=%d\n", auditinfo.ai_auid);
+	fprintf(thread_stdout, "mask.success=0x%08x\n", auditinfo.ai_mask.am_success);
+	fprintf(thread_stdout, "mask.failure=0x%08x\n", auditinfo.ai_mask.am_failure);
+	fprintf(thread_stdout, "termid.port=0x%08x\n", auditinfo.ai_termid.at_port);
+	fprintf(thread_stdout, "asid=%d\n", auditinfo.ai_asid);
 }
 #endif
 
@@ -375,11 +382,12 @@
 {
 
 	if (!pw) {
-		if ((pw = getpwuid(getuid())) == NULL)
+        if ((pw = getpwuid(getuid())) == NULL) {
 			err(1, "getpwuid");
+        }
 	}
 
-	(void)printf("%s\n", pw->pw_gecos);
+	(void)fprintf(thread_stdout, "%s\n", pw->pw_gecos);
 }
 
 void
@@ -403,7 +411,7 @@
 	if (pw) {
 #ifdef __APPLE__
 		// 5235093
-		ngroups = getgrouplist_2(pw->pw_name, pw->pw_gid, &groups);
+		// ngroups = getgrouplist_2(pw->pw_name, pw->pw_gid, &groups);
 #else
 		ngroups = NGROUPS + 1;
 		(void) getgrouplist(pw->pw_name, pw->pw_gid, groups, &ngroups);
@@ -421,18 +429,18 @@
 			continue;
 		if (nflag) {
 			if ((gr = getgrgid(id)))
-				(void)printf(fmt, gr->gr_name);
+				(void)fprintf(thread_stdout, fmt, gr->gr_name);
 			else
-				(void)printf(*fmt == ' ' ? " %u" : "%u",
+				(void)fprintf(thread_stdout, *fmt == ' ' ? " %u" : "%u",
 				    id);
 			fmt = " %s";
 		} else {
-			(void)printf(fmt, id);
+			(void)fprintf(thread_stdout, fmt, id);
 			fmt = " %u";
 		}
 		lastid = id;
 	}
-	(void)printf("\n");
+	(void)fprintf(thread_stdout, "\n");
 #ifdef __APPLE__
 	free(groups);
 #endif
@@ -449,7 +457,7 @@
 	int error;
 
 	error = mac_prepare_process_label(&label);
-	if (error == -1)
+    if (error == -1)
 		errx(1, "mac_prepare_type: %s", strerror(errno));
 
 	error = mac_get_proc(label);
@@ -460,7 +468,7 @@
 	if (error == -1)
 		errx(1, "mac_to_text: %s", strerror(errno));
 
-	(void)printf("%s\n", string);
+	(void)fprintf(thread_stdout, "%s\n", string);
 	mac_free(label);
 	free(string);
 #endif /* __APPLE__ */
@@ -483,6 +491,7 @@
 	if (*u && !*ep && (pw = getpwuid(id)))
 		return(pw);
 	errx(1, "%s: no such user", u);
+    return NULL; // keep compiler happy
 	/* NOTREACHED */
 }
 
@@ -491,11 +500,12 @@
 {
 
 	if (!pw) {
-		if ((pw = getpwuid(getuid())) == NULL)
+        if ((pw = getpwuid(getuid())) == NULL) {
 			err(1, "getpwuid");
+        }
 	}
 
-	(void)printf("%s:%s:%d:%d:%s:%ld:%ld:%s:%s:%s\n", pw->pw_name,
+	(void)fprintf(thread_stdout, "%s:%s:%d:%d:%s:%ld:%ld:%s:%s:%s\n", pw->pw_name,
 			pw->pw_passwd, pw->pw_uid, pw->pw_gid, pw->pw_class,
 			(long)pw->pw_change, (long)pw->pw_expire, pw->pw_gecos,
 			pw->pw_dir, pw->pw_shell);
@@ -507,11 +517,11 @@
 {
 
 	if (isgroups)
-		(void)fprintf(stderr, "usage: groups [user]\n");
+		(void)fprintf(thread_stderr, "usage: groups [user]\n");
 	else if (iswhoami)
-		(void)fprintf(stderr, "usage: whoami\n");
+		(void)fprintf(thread_stderr, "usage: whoami\n");
 	else
-		(void)fprintf(stderr, "%s\n%s%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
+		(void)fprintf(thread_stderr, "%s\n%s%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
 		    "usage: id [user]",
 #ifdef USE_BSM_AUDIT
 		    "       id -A\n",
diff -Naur shell_cmds-203/printenv/printenv.c shell_cmds/printenv/printenv.c
--- shell_cmds-203/printenv/printenv.c	2014-08-05 00:47:11.000000000 +0200
+++ shell_cmds/printenv/printenv.c	2018-12-08 16:03:31.000000000 +0100
@@ -48,8 +48,9 @@
 #include <stdio.h>
 #include <string.h>
 #include <unistd.h>
+#include "ios_error.h"
 
-void	usage(void);
+static void	usage(void);
 extern char **environ;
 
 /*
@@ -59,11 +60,12 @@
  * February, 1979
  */
 int
-main(int argc, char *argv[])
+printenv_main(int argc, char *argv[])
 {
 	char *cp, **ep;
 	size_t len;
 	int ch;
+    optind = 1; opterr = 1; optreset = 1;
 
 	while ((ch = getopt(argc, argv, "")) != -1)
 		switch(ch) {
@@ -76,7 +78,7 @@
 
 	if (argc == 0) {
 		for (ep = environ; *ep; ep++)
-			(void)printf("%s\n", *ep);
+			(void)fprintf(thread_stdout, "%s\n", *ep);
 		exit(0);
 	}
 	len = strlen(*argv);
@@ -84,16 +86,16 @@
 		if (!memcmp(*ep, *argv, len)) {
 			cp = *ep + len;
 			if (!*cp || *cp == '=') {
-				(void)printf("%s\n", *cp ? cp + 1 : cp);
+				(void)fprintf(thread_stdout, "%s\n", *cp ? cp + 1 : cp);
 				exit(0);
 			}
 		}
 	exit(1);
 }
 
-void
+static void
 usage(void)
 {
-	(void)fprintf(stderr, "usage: printenv [name]\n");
+	(void)fprintf(thread_stderr, "usage: printenv [name]\n");
 	exit(1);
 }
diff -Naur shell_cmds-203/pwd/pwd.c shell_cmds/pwd/pwd.c
--- shell_cmds-203/pwd/pwd.c	2006-09-12 00:14:13.000000000 +0200
+++ shell_cmds/pwd/pwd.c	2018-12-08 16:03:31.000000000 +0100
@@ -50,16 +50,19 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <string.h>
+#include "ios_error.h"
 
 static char *getcwd_logical(void);
-void usage(void);
+static void usage(void);
 
 int
-main(int argc, char *argv[])
+pwd_main(int argc, char *argv[])
 {
 	int physical;
 	int ch;
 	char *p;
+    optind = 1; opterr = 1; optreset = 1;
 
 	// 4207130
 	physical = 0;
@@ -90,18 +93,19 @@
 	 */
 	if ((!physical && (p = getcwd_logical()) != NULL) ||
 	    ((physical || errno == ENOENT) && (p = getcwd(NULL, 0)) != NULL))
-		printf("%s\n", p);
-	else
+		fprintf(thread_stdout, "%s\n", p);
+    else {
 		err(1, ".");
-
-	exit(0);
+    }
+    
+    exit(0);
 }
 
-void
+static void
 usage(void)
 {
 
-	(void)fprintf(stderr, "usage: pwd [-L | -P]\n");
+	(void)fprintf(thread_stderr, "usage: pwd [-L | -P]\n");
   	exit(1);
 }
 
diff -Naur shell_cmds-203/tee/tee.c shell_cmds/tee/tee.c
--- shell_cmds-203/tee/tee.c	1999-04-23 04:44:50.000000000 +0200
+++ shell_cmds/tee/tee.c	2018-12-08 16:03:31.000000000 +0100
@@ -57,29 +57,37 @@
 #include <string.h>
 #include <locale.h>
 #include <err.h>
+#include "ios_error.h"
 
 typedef struct _list {
 	struct _list *next;
-	int fd;
+    FILE* stream;
+	// int fd;
 	char *name;
 } LIST;
-LIST *head;
+static LIST *head;
 
-void	add __P((int, char *));
-int	main __P((int, char **));
+static void	add __P((FILE*, char *));
+int	tee_main __P((int, char **));
 
 int
-main(argc, argv)
+tee_main(argc, argv)
 	int argc;
 	char *argv[];
 {
 	LIST *p;
-	int n, fd, rval, wval;
+    int n, rval;
+    size_t wval;
+    FILE* fd;
 	char *bp;
 	int append, ch, exitval;
 	char *buf;
 #define	BSIZE (8 * 1024)
-
+    // iOS: initialize flags:
+    append = 0; exitval = 0;
+    rval = 0; wval = 0; fd = 0; n = 0; ch = 0;
+    
+    
 	setlocale(LC_ALL, "");
 
 	append = 0;
@@ -93,32 +101,32 @@
 			break;
 		case '?':
 		default:
-			(void)fprintf(stderr, "usage: tee [-ai] [file ...]\n");
+			(void)fprintf(thread_stderr, "usage: tee [-ai] [file ...]\n");
 			exit(1);
 		}
 	argv += optind;
 	argc -= optind;
 
-	if ((buf = malloc((size_t)BSIZE)) == NULL)
-		err(1, "malloc");
+    if ((buf = malloc((size_t)BSIZE)) == NULL) {
+        err(1, "malloc");
+    }
 
-	add(STDOUT_FILENO, "stdout");
+	add(thread_stdout, "stdout");
 
 	for (exitval = 0; *argv; ++argv)
-		if ((fd = open(*argv, append ? O_WRONLY|O_CREAT|O_APPEND :
-		    O_WRONLY|O_CREAT|O_TRUNC, DEFFILEMODE)) < 0) {
-			warn("%s", *argv);
+        if ((fd = fopen(*argv, append ? "a" : "w")) < 0) {
+            warn("%s", *argv);
 			exitval = 1;
 		} else
 			add(fd, *argv);
 
-	while ((rval = read(STDIN_FILENO, buf, BSIZE)) > 0)
+	while ((rval = read(fileno(thread_stdin), buf, BSIZE)) > 0)
 		for (p = head; p; p = p->next) {
 			n = rval;
 			bp = buf;
 			do {
-				if ((wval = write(p->fd, bp, n)) == -1) {
-					warn("%s", p->name);
+				if ((wval = fwrite(bp, 1, n, p->stream)) != n) {
+                    warn("%s", p->name);
 					exitval = 1;
 					break;
 				}
@@ -126,30 +134,41 @@
 			} while (n -= wval);
 		}
 	if (rval < 0) {
-		warn("read");
+        warn("read");
 		exitval = 1;
 	}
 
-	for (p = head; p; p = p->next) {
-		if (close(p->fd) == -1) {
-			warn("%s", p->name);
-			exitval = 1;
-		}
+    for (p = head; p; p = p->next) {
+        if (strcmp(p->name, "stdout") != 0) {
+            if (fclose(p->stream) == -1) {
+                warn("%s", p->name);
+                exitval = 1;
+            }
+        }
 	}
 
-	exit(exitval);
+    free(buf);
+    LIST *pnext;
+    for (p = head; p; p = pnext) {
+        pnext = p->next;
+        free(p);
+        p = NULL;
+    }
+    head = NULL;
+    exit(exitval);
 }
 
 void
-add(fd, name)
-	int fd;
+add(stream, name)
+	FILE* stream;
 	char *name;
 {
 	LIST *p;
 
-	if ((p = malloc((size_t)sizeof(LIST))) == NULL)
-		err(1, "malloc");
-	p->fd = fd;
+    if ((p = malloc((size_t)sizeof(LIST))) == NULL) {
+        err(1, "malloc");
+    }
+	p->stream = stream;
 	p->name = name;
 	p->next = head;
 	head = p;
diff -Naur shell_cmds-203/uname/uname.c shell_cmds/uname/uname.c
--- shell_cmds-203/uname/uname.c	2013-09-26 01:55:54.000000000 +0200
+++ shell_cmds/uname/uname.c	2018-12-08 16:03:31.000000000 +0100
@@ -49,14 +49,16 @@
 
 #include <sys/sysctl.h>
 #include <sys/utsname.h>
+#include <errno.h>
+#include "ios_error.h"
 
 #ifdef __APPLE__
-#include <get_compat.h>
-#else  /* !__APPLE__ */
+// #include <get_compat.h>
+// #else  /* !__APPLE__ */
 #define COMPAT_MODE(a,b) (1)
 #endif /* __APPLE__ */
 
-int	main __P((int, char **));
+int	uname_main __P((int, char **));
 static void usage __P((void));
 
 /* Note that PRINT_MACHINE_ARCH is excluded from PRINT_ALL! */
@@ -70,7 +72,7 @@
     (PRINT_SYSNAME|PRINT_NODENAME|PRINT_RELEASE|PRINT_VERSION|PRINT_MACHINE)
 
 int
-main(argc, argv) 
+uname_main(argc, argv) 
 	int argc;
 	char **argv;
 {
@@ -81,7 +83,8 @@
 	int c;
 	int space = 0;
 	int print_mask = 0;
-
+    optind = 1; opterr = 1; optreset = 1;
+    
 	(void)setlocale(LC_ALL, "");
 
 	while ((c = getopt(argc,argv,"amnprsv")) != -1) {
@@ -160,37 +163,37 @@
 
 	if (print_mask & PRINT_SYSNAME) {
 		space++;
-		fputs(u.sysname, stdout);
+		fputs(u.sysname, thread_stdout);
 	}
 	if (print_mask & PRINT_NODENAME) {
 		if (space++) putchar(' ');
-		fputs(u.nodename, stdout);
+		fputs(u.nodename, thread_stdout);
 	}
 	if (print_mask & PRINT_RELEASE) {
 		if (space++) putchar(' ');
-		fputs(u.release, stdout);
+		fputs(u.release, thread_stdout);
 	}
 	if (print_mask & PRINT_VERSION) {
 		if (space++) putchar(' ');
-		fputs(u.version, stdout);
+		fputs(u.version, thread_stdout);
 	}
 	if (print_mask & PRINT_MACHINE) {
 		if (space++) putchar(' ');
-		fputs(u.machine, stdout);
+		fputs(u.machine, thread_stdout);
 	}
 	if (print_mask & PRINT_MACHINE_ARCH) {
 		if (space++) putchar(' ');
 #ifndef __APPLE__
-		fputs(machine_arch, stdout);
+		fputs(machine_arch, thread_stdout);
 #else
 #if defined(__ppc__) || defined(__ppc64__)
-		fputs("powerpc", stdout);
+		fputs("powerpc", thread_stdout);
 #elif defined(__i386__) || defined(__x86_64__)
-		fputs("i386", stdout);
+		fputs("i386", thread_stdout);
 #elif defined(__arm__) || defined(__arm64__)
-		fputs("arm", stdout);
+		fputs("arm", thread_stdout);
 #else
-		fputs("unknown", stdout);
+		fputs("unknown", thread_stdout);
 #endif
 #endif /* __APPLE__ */
 	}
@@ -203,6 +206,6 @@
 static void
 usage()
 {
-	fprintf(stderr, "usage: uname [-amnprsv]\n");
+	fprintf(thread_stderr, "usage: uname [-amnprsv]\n");
 	exit(EXIT_FAILURE);
 }
diff -Naur shell_cmds-203/w/extern.h shell_cmds/w/extern.h
--- shell_cmds-203/w/extern.h	2007-01-19 02:15:36.000000000 +0100
+++ shell_cmds/w/extern.h	2018-12-08 16:03:31.000000000 +0100
@@ -31,7 +31,7 @@
  */
 
 
-extern	int use_ampm;
+extern	__thread int use_ampm;
 
 struct kinfo_proc;
 
diff -Naur shell_cmds-203/w/fmt.c shell_cmds/w/fmt.c
--- shell_cmds-203/w/fmt.c	2007-01-19 02:15:36.000000000 +0100
+++ shell_cmds/w/fmt.c	2018-12-08 16:03:31.000000000 +0100
@@ -45,7 +45,7 @@
 #include <string.h>
 #include <unistd.h>
 #include <vis.h>
-
+#include "ios_error.h"
 //#include "ps.h"
 
 static char *cmdpart(char *);
@@ -64,10 +64,12 @@
 	static char *buf = NULL;
 
 	if (buf == NULL) {
-		if ((arg_max = sysconf(_SC_ARG_MAX)) == -1)
+        if ((arg_max = sysconf(_SC_ARG_MAX)) == -1) {
 			errx(1, "sysconf _SC_ARG_MAX failed");
-		if ((buf = malloc((u_int)(4 * arg_max)  +  1)) == NULL)
+        }
+        if ((buf = malloc((u_int)(4 * arg_max)  +  1)) == NULL) {
 			errx(1, "malloc failed");
+        }
 	}
 
 	if (*argv == 0) {
diff -Naur shell_cmds-203/w/pr_time.c shell_cmds/w/pr_time.c
--- shell_cmds-203/w/pr_time.c	2007-01-19 02:15:36.000000000 +0100
+++ shell_cmds/w/pr_time.c	2018-12-08 16:03:31.000000000 +0100
@@ -44,6 +44,7 @@
 #include <string.h>
 
 #include "extern.h"
+#include "ios_error.h"
 
 /*
  * pr_attime --
@@ -80,7 +81,7 @@
 	}
 
 	(void)strftime(buf, sizeof(buf), fmt, &tp);
-	(void)printf("%-7.7s", buf);
+	(void)fprintf(thread_stdout, "%-7.7s", buf);
 }
 
 /*
@@ -94,7 +95,7 @@
 	/* If idle more than 36 hours, print as a number of days. */
 	if (idle >= 36 * 3600) {
 		int days = idle / 86400;
-		(void)printf(" %dday%s ", days, days > 1 ? "s" : " " );
+		(void)fprintf(thread_stdout, " %dday%s ", days, days > 1 ? "s" : " " );
 		if (days >= 100)
 			return (2);
 		if (days >= 10)
@@ -103,15 +104,15 @@
 
 	/* If idle more than an hour, print as HH:MM. */
 	else if (idle >= 3600)
-		(void)printf(" %2d:%02d ",
+		(void)fprintf(thread_stdout, " %2d:%02d ",
 		    (int)(idle / 3600), (int)((idle % 3600) / 60));
 
 	else if (idle / 60 == 0)
-		(void)printf("     - ");
+		(void)fprintf(thread_stdout, "     - ");
 
 	/* Else print the minutes idle. */
 	else
-		(void)printf("    %2d ", (int)(idle / 60));
+		(void)fprintf(thread_stdout, "    %2d ", (int)(idle / 60));
 
 	return (0); /* not idle longer than 9 days */
 }
diff -Naur shell_cmds-203/w/proc_compare.c shell_cmds/w/proc_compare.c
--- shell_cmds-203/w/proc_compare.c	2007-01-19 02:15:36.000000000 +0100
+++ shell_cmds/w/proc_compare.c	2018-12-08 16:03:31.000000000 +0100
@@ -38,13 +38,15 @@
 __FBSDID("$FreeBSD: src/usr.bin/w/proc_compare.c,v 1.9 2004/04/14 09:34:17 bde Exp $");
 #endif
 
+#define HAVE_UTMPX 1
 #include <sys/param.h>
 #ifdef __APPLE__
 #include <sys/time.h>
 #endif
 #include <sys/proc.h>
 #include <sys/time.h>
-#include <sys/user.h>
+// #include <sys/user.h>
+#include <sys/sysctl.h>
 
 #include "extern.h"
 
diff -Naur shell_cmds-203/w/w.c shell_cmds/w/w.c
--- shell_cmds-203/w/w.c	2007-10-03 11:55:12.000000000 +0200
+++ shell_cmds/w/w.c	2018-12-08 16:03:31.000000000 +0100
@@ -50,15 +50,16 @@
  * This program is similar to the systat command on Tenex/Tops 10/20
  *
  */
+#define HAVE_UTMPX 1
 #include <sys/param.h>
 #include <sys/time.h>
 #include <sys/stat.h>
 #include <sys/sysctl.h>
 #include <sys/proc.h>
-#include <sys/user.h>
+// #include <sys/user.h>
 #include <sys/ioctl.h>
 #include <sys/socket.h>
-#include <sys/tty.h>
+// #include <sys/tty.h>
 
 #ifndef __APPLE__
 #include <machine/cpu.h>
@@ -75,17 +76,17 @@
 #include <kvm.h>
 #endif
 #include <langinfo.h>
-#include <libutil.h>
+#include "libutil.h"
 #include <limits.h>
 #include <locale.h>
 #include <netdb.h>
-#include <nlist.h>
+#include <mach-o/nlist.h>
 #include <paths.h>
 #include <resolv.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <timeconv.h>
+// #include <timeconv.h>
 #include <unistd.h>
 #if HAVE_UTMPX
 #include <utmpx.h>
@@ -100,35 +101,36 @@
 #include <TargetConditionals.h>
 
 #include "extern.h"
+#include "ios_error.h"
 
-struct timeval	boottime;
+static struct timeval	boottime;
 #if !HAVE_UTMPX
-struct utmp	utmp;
+static struct utmp	utmp;
 #endif
-struct winsize	ws;
+static struct winsize	ws;
 #if HAVE_KVM
-kvm_t	       *kd;
+static kvm_t	       *kd;
 #endif
-time_t		now;		/* the current time of day */
-int		ttywidth;	/* width of tty */
-int		argwidth;	/* width of tty */
-int		header = 1;	/* true if -h flag: don't print heading */
+static time_t		now;		/* the current time of day */
+static int		ttywidth;	/* width of tty */
+static int		argwidth;	/* width of tty */
+static int		header = 1;	/* true if -h flag: don't print heading */
 #if !HAVE_UTMPX
-int		nflag;		/* true if -n flag: don't convert addrs */
+static int		nflag;		/* true if -n flag: don't convert addrs */
 #endif
 #ifndef __APPLE__
-int		dflag;		/* true if -d flag: output debug info */
+static int		dflag;		/* true if -d flag: output debug info */
 #endif
-int		sortidle;	/* sort by idle time */
-int		use_ampm;	/* use AM/PM time */
-int             use_comma;      /* use comma as floats separator */
-char	      **sel_users;	/* login array of particular users selected */
+static int		sortidle;	/* sort by idle time */
+__thread int		use_ampm;	/* use AM/PM time */
+static int             use_comma;      /* use comma as floats separator */
+static char	      **sel_users;	/* login array of particular users selected */
 
 /*
  * One of these per active utmp entry.
  */
-struct	entry {
-	struct	entry *next;
+static struct	utmp_entry {
+	struct	utmp_entry *next;
 #if HAVE_UTMPX
 	struct	utmpx utmp;
 #else
@@ -161,7 +163,7 @@
 char *fmt_argv(char **, char *, int);	/* ../../bin/ps/fmt.c */
 
 int
-main(int argc, char *argv[])
+w_main(int argc, char *argv[])
 {
 	struct kinfo_proc *kp;
 	struct kinfo_proc *kprocbuf;
@@ -200,6 +202,7 @@
 	use_ampm = (*nl_langinfo(T_FMT_AMPM) != '\0');
 	use_comma = (*nl_langinfo(RADIXCHAR) != ',');
 #endif
+    optind = 1; opterr = 1; optreset = 1;
 
 	/* Are we w(1) or uptime(1)? */
 	if (this_is_uptime(argv[0]) == 0) {
@@ -251,7 +254,7 @@
 #endif
 #ifdef __APPLE__
 		case 'd':
-			warnx("[-MNdflnsuw] no longer supported");
+            warnx("[-MNdflnsuw] no longer supported");
 #else
 			warnx("[-flsuw] no longer supported");
 #endif
@@ -278,16 +281,18 @@
 	if (dropgid)
 		setgid(getgid());
 
-	if ((kd = kvm_openfiles(nlistf, memf, NULL, O_RDONLY, errbuf)) == NULL)
+    if ((kd = kvm_openfiles(nlistf, memf, NULL, O_RDONLY, errbuf)) == NULL) {
 		errx(1, "%s", errbuf);
+    }
 #endif
 
 	(void)time(&now);
 #if HAVE_UTMPX
 	setutxent();
 #else
-	if ((ut = fopen(_PATH_UTMP, "r")) == NULL)
+    if ((ut = fopen(_PATH_UTMP, "r")) == NULL) {
 		err(1, "%s", _PATH_UTMP);
+    }
 #endif
 
 	if (*argv)
@@ -324,8 +329,9 @@
 			if (!usermatch)
 				continue;
 		}
-		if ((ep = calloc(1, sizeof(struct entry))) == NULL)
+        if ((ep = calloc(1, sizeof(struct utmp_entry))) == NULL) {
 			errx(1, "calloc");
+        }
 		*nextp = ep;
 		nextp = &ep->next;
 #if HAVE_UTMPX
@@ -386,7 +392,7 @@
 #define HEADER_WHAT		"WHAT\n"
 #define WUSED  (UT_NAMESIZE + UT_LINESIZE + W_DISPHOSTSIZE + \
 		sizeof(HEADER_LOGIN_IDLE) + 3)	/* header width incl. spaces */ 
-		(void)printf("%-*.*s %-*.*s %-*.*s  %s", 
+		(void)fprintf(thread_stdout, "%-*.*s %-*.*s %-*.*s  %s", 
 				UT_NAMESIZE, UT_NAMESIZE, HEADER_USER,
 				UT_LINESIZE, UT_LINESIZE, HEADER_TTY,
 				W_DISPHOSTSIZE, W_DISPHOSTSIZE, HEADER_FROM,
@@ -394,8 +400,9 @@
 	}
 
 #if HAVE_KVM
-	if ((kp = kvm_getprocs(kd, KERN_PROC_ALL, 0, &nentries)) == NULL)
+    if ((kp = kvm_getprocs(kd, KERN_PROC_ALL, 0, &nentries)) == NULL) {
 		err(1, "%s", kvm_geterr(kd));
+    }
 #else
 	mib[0] = CTL_KERN;
 	mib[1] = KERN_PROC;
@@ -464,9 +471,9 @@
 			}
 		}
 	}
-	if ((ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) == -1 &&
-	     ioctl(STDERR_FILENO, TIOCGWINSZ, &ws) == -1 &&
-	     ioctl(STDIN_FILENO, TIOCGWINSZ, &ws) == -1) || ws.ws_col == 0)
+	if ((ioctl(fileno(thread_stdout), TIOCGWINSZ, &ws) == -1 &&
+	     ioctl(fileno(thread_stderr), TIOCGWINSZ, &ws) == -1 &&
+	     ioctl(fileno(thread_stdin), TIOCGWINSZ, &ws) == -1) || ws.ws_col == 0)
 	       ttywidth = 79;
         else
 	       ttywidth = ws.ws_col - 1;
@@ -484,12 +491,13 @@
 #else
 		w_getargv();
 #endif /* HAVE_KVM */
-		if (ep->args == NULL)
-			err(1, NULL);
+        if (ep->args == NULL) {
+            err(1, NULL);
+        }
 	}
 	/* sort by idle time */
 	if (sortidle && ehead != NULL) {
-		struct entry *from, *save;
+		struct utmp_entry *from, *save;
 
 		from = ehead;
 		ehead = NULL;
@@ -561,12 +569,12 @@
 				    dkp->ki_comm, MAXCOMLEN);
 				if (ptr == NULL)
 					ptr = "-";
-				(void)printf("\t\t%-9d %s\n",
+				(void)fprintf(thread_stdout, "\t\t%-9d %s\n",
 				    dkp->ki_pid, ptr);
 			}
 		}
 #endif /* !__APPLE__ */
-		(void)printf("%-*.*s %-*.*s %-*.*s ",
+		(void)fprintf(thread_stdout, "%-*.*s %-*.*s %-*.*s ",
 #if HAVE_UTMPX
 		    UT_NAMESIZE, (int)sizeof(ep->utmp.ut_user), ep->utmp.ut_user,
 		    UT_LINESIZE, (int)sizeof(ep->utmp.ut_line),
@@ -585,7 +593,7 @@
 		pr_attime(&t, &now);
 #endif
 		longidle = pr_idle(ep->idle);
-		(void)printf("%.*s\n", argwidth - longidle, ep->args);
+		(void)fprintf(thread_stdout, "%.*s\n", argwidth - longidle, ep->args);
 #ifdef __APPLE__
 		free(ep->args);
 #endif
@@ -613,7 +621,7 @@
 	 */
 	if (strftime(buf, sizeof(buf),
 	    use_ampm ? "%l:%M%p" : "%k:%M", localtime(nowp)) != 0)
-		(void)printf("%s ", buf);
+		(void)fprintf(thread_stdout, "%s ", buf);
 	/*
 	 * Print how long system has been up.
 	 * (Found by looking getting "boottime" from the kernel)
@@ -632,35 +640,35 @@
 		uptime %= 3600;
 		mins = uptime / 60;
 		secs = uptime % 60;
-		(void)printf(" up");
+		(void)fprintf(thread_stdout, " up");
 		if (days > 0)
-			(void)printf(" %d day%s,", days, days > 1 ? "s" : "");
+			(void)fprintf(thread_stdout, " %d day%s,", days, days > 1 ? "s" : "");
 		if (hrs > 0 && mins > 0)
-			(void)printf(" %2d:%02d,", hrs, mins);
+			(void)fprintf(thread_stdout, " %2d:%02d,", hrs, mins);
 		else if (hrs > 0)
-			(void)printf(" %d hr%s,", hrs, hrs > 1 ? "s" : "");
+			(void)fprintf(thread_stdout, " %d hr%s,", hrs, hrs > 1 ? "s" : "");
 		else if (mins > 0)
-			(void)printf(" %d min%s,", mins, mins > 1 ? "s" : "");
+			(void)fprintf(thread_stdout, " %d min%s,", mins, mins > 1 ? "s" : "");
 		else
-			(void)printf(" %d sec%s,", secs, secs > 1 ? "s" : "");
+			(void)fprintf(thread_stdout, " %d sec%s,", secs, secs > 1 ? "s" : "");
 	}
 
 	/* Print number of users logged in to system */
-	(void)printf(" %d user%s", nusers, nusers == 1 ? "" : "s");
+	(void)fprintf(thread_stdout, " %d user%s", nusers, nusers == 1 ? "" : "s");
 
 	/*
 	 * Print 1, 5, and 15 minute load averages.
 	 */
 	if (getloadavg(avenrun, sizeof(avenrun) / sizeof(avenrun[0])) == -1)
-		(void)printf(", no load average information available\n");
+		(void)fprintf(thread_stdout, ", no load average information available\n");
 	else {
-		(void)printf(", load averages:");
+		(void)fprintf(thread_stdout, ", load averages:");
 		for (i = 0; i < (int)(sizeof(avenrun) / sizeof(avenrun[0])); i++) {
 			if (use_comma && i > 0)
-				(void)printf(",");
-			(void)printf(" %.2f", avenrun[i]);
+				(void)fprintf(thread_stdout, ",");
+			(void)fprintf(thread_stdout, " %.2f", avenrun[i]);
 		}
-		(void)printf("\n");
+		(void)fprintf(thread_stdout, "\n");
 	}
 }
 
@@ -674,7 +682,7 @@
 	if (stat(ttybuf, &sb) == 0) {
 		return (&sb);
 	} else {
-		warn("%s", ttybuf);
+        warn("%s", ttybuf);
 		return (NULL);
 	}
 }
@@ -683,10 +691,10 @@
 usage(int wcmd)
 {
 	if (wcmd)
-		(void)fprintf(stderr,
+		(void)fprintf(thread_stderr,
 		    "usage: w [hi] [user ...]\n");
 	else
-		(void)fprintf(stderr, "usage: uptime\n");
+		(void)fprintf(thread_stderr, "usage: uptime\n");
 	exit(1);
 }
 
diff -Naur shell_cmds-203/xargs/pathnames.h shell_cmds/xargs/pathnames.h
--- shell_cmds-203/xargs/pathnames.h	2005-10-06 23:22:57.000000000 +0200
+++ shell_cmds/xargs/pathnames.h	2018-12-08 16:03:31.000000000 +0100
@@ -33,4 +33,5 @@
  *	@(#)pathnames.h	8.1 (Berkeley) 6/6/93
  */
 
-#define	_PATH_ECHO	"/bin/echo"
+// ios_system: change /bin/echo to echo
+#define	_PATH_ECHO	"echo"
diff -Naur shell_cmds-203/xargs/strnsubst.c shell_cmds/xargs/strnsubst.c
--- shell_cmds-203/xargs/strnsubst.c	2005-10-06 23:22:57.000000000 +0200
+++ shell_cmds/xargs/strnsubst.c	2018-12-08 16:03:31.000000000 +0100
@@ -15,6 +15,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include "ios_error.h"
 
 void	strnsubst(char **, const char *, const char *, size_t);
 
diff -Naur shell_cmds-203/xargs/xargs.c shell_cmds/xargs/xargs.c
--- shell_cmds-203/xargs/xargs.c	2011-05-10 03:08:35.000000000 +0200
+++ shell_cmds/xargs/xargs.c	2018-12-08 16:03:31.000000000 +0100
@@ -65,11 +65,17 @@
 #include <string.h>
 #include <unistd.h>
 
+#include <TargetConditionals.h>
+#ifdef TARGET_OS_IPHONE
+#include "ios_error.h"
+#undef stderr
+#define stderr thread_stderr
+#endif
 #include "pathnames.h"
 
 #ifdef __APPLE__
-#include <get_compat.h>
-#else
+// #include <get_compat.h>
+// #else
 #define COMPAT_MODE(a,b) (1)
 #endif /* __APPLE__ */
 
@@ -81,24 +87,24 @@
 void		strnsubst(char **, const char *, const char *, size_t);
 static void	waitchildren(const char *, int);
 
-static int last_was_newline = 1;
-static int last_was_blank = 0;
+static __thread int last_was_newline = 1;
+static __thread int last_was_blank = 0;
 
 static char echo[] = _PATH_ECHO;
-static char **av, **bxp, **ep, **endxp, **xp;
-static char *argp, *bbp, *ebp, *inpline, *p, *replstr;
+static __thread char **av, **bxp, **ep, **endxp, **xp;
+static __thread char *argp, *bbp, *ebp, *inpline, *p, *replstr;
 static const char *eofstr;
-static int count, insingle, indouble, oflag, pflag, tflag, Rflag, rval, zflag;
-static int cnt, Iflag, jfound, Lflag, wasquoted, xflag;
-static int curprocs, maxprocs;
+static __thread int count, insingle, indouble, oflag, pflag, tflag, Rflag, rval, zflag;
+static __thread int cnt, Iflag, jfound, Lflag, wasquoted, xflag;
+static __thread int curprocs, maxprocs;
 static size_t pad9314053;
 
-static volatile int childerr;
+static __thread volatile int childerr;
 
 extern char **environ;
 
 int
-main(int argc, char *argv[])
+xargs_main(int argc, char *argv[])
 {
 	long arg_max;
 	int ch, Jflag, nflag, nline;
@@ -110,7 +116,36 @@
 	ep = environ;
 	eofstr = "";
 	Jflag = nflag = 0;
-
+    
+    // Init all flags and variables:
+    last_was_newline = 1;
+    last_was_blank = 0;
+    argp = NULL;
+    bbp = NULL;
+    ebp = NULL;
+    inpline = NULL;
+    p = NULL;
+    replstr = NULL;
+    count = 0;
+    insingle = 0;
+    indouble = 0;
+    oflag = 0;
+    pflag = 0;
+    tflag = 0;
+    Rflag = 0;
+    rval = 0;
+    zflag = 0;
+    cnt = 0;
+    Iflag = 0;
+    jfound = 0;
+    Lflag = 0;
+    wasquoted = 0;
+    xflag = 0;
+    curprocs = 0;
+    maxprocs = 0;
+    childerr = 0;
+    // end init
+    
 	(void)setlocale(LC_ALL, "");
 
 	/*
@@ -127,8 +162,13 @@
 	 * probably not worthwhile.
 	 */
 	nargs = 5000;
-	if ((arg_max = sysconf(_SC_ARG_MAX)) == -1)
+#ifndef TARGET_OS_IPHONE
+    if ((arg_max = sysconf(_SC_ARG_MAX)) == -1) {
 		errx(1, "sysconf(_SC_ARG_MAX) failed");
+    }
+#else
+    arg_max = _POSIX_ARG_MAX;
+#endif
 	nline = arg_max - MAXPATHLEN; /* for argv[0] from execvp() */
 	pad9314053 = sizeof(char *); /* reserve for string area rounding */
 	while (*ep != NULL) {
@@ -593,11 +633,16 @@
 				err(1, "can't dup2 to stdin");
 			close(fd);
 		}
+#ifndef TARGET_OS_IPHONE
 		execvp(argv[0], argv);
 		childerr = errno;
 		_exit(1);
+#else
+        childerr = execvp(argv[0], argv);
+#endif
 	}
 	curprocs++;
+    // Now, we need to wait until the child process has finished. 
 	waitchildren(*argv, 0);
 }
 
@@ -624,8 +669,10 @@
 		if (WEXITSTATUS(status))
 			rval = 1;
 	}
+#ifndef TARGET_OS_IPHONE
 	if (pid == -1 && errno != ECHILD)
 		err(1, "wait3");
+#endif
 }
 
 /*
